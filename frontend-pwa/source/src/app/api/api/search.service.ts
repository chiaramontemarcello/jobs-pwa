/* eslint-disable object-shorthand */
/* eslint-disable no-underscore-dangle */
/* eslint-disable @typescript-eslint/consistent-type-assertions */
/* eslint-disable max-len */
/* eslint-disable @typescript-eslint/member-ordering */
/**
 * jobs.ch
 * Reverse Engineering of the jobs.ch public API
 *
 * The version of the OpenAPI document: 1.0.0-oas3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
    HttpClient,
    HttpHeaders,
    HttpParams,
    HttpResponse,
    HttpEvent,
    HttpParameterCodec,
} from '@angular/common/http';
import { CustomHttpParameterCodec } from '../encoder';
import { Observable } from 'rxjs';

import { FilterResult } from '../model/models';

import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';
import { SearchServiceInterface } from './search.serviceInterface';

@Injectable({
    providedIn: 'root',
})
export class SearchService implements SearchServiceInterface {
    protected basePath = '/api/v1/public';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(
        protected httpClient: HttpClient,
        @Optional() @Inject(BASE_PATH) basePath: string,
        @Optional() configuration: Configuration
    ) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }

    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === 'object' && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(
        httpParams: HttpParams,
        value?: any,
        key?: string
    ): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === 'object') {
            if (Array.isArray(value)) {
                (value as any[]).forEach(
                    (elem) => (httpParams = this.addToHttpParamsRecursive(httpParams, elem, key))
                );
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(
                        key,
                        (value as Date).toISOString().substr(0, 10)
                    );
                } else {
                    throw Error('key may not be null if value is Date');
                }
            } else {
                Object.keys(value).forEach(
                    (k) =>
                        (httpParams = this.addToHttpParamsRecursive(
                            httpParams,
                            value[k],
                            key != null ? `${key}.${k}` : k
                        ))
                );
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error('key may not be null if value is not object or array');
        }
        return httpParams;
    }

    /**
     * Serach for a job with filters
     * @param location Status values that need to be considered for filter
     * @param rows Status values that need to be considered for filter
     * @param query Status values that need to be considered for filter
     * @param employmentGradeMin Status values that need to be considered for filter
     * @param employmentGradeMax Status values that need to be considered for filter
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getByFilters(
        location?: string,
        rows?: number,
        query?: string,
        employmentGradeMin?: number,
        employmentGradeMax?: number,
        observe?: 'body',
        reportProgress?: boolean,
        options?: { httpHeaderAccept?: '*/*' }
    ): Observable<FilterResult>;
    public getByFilters(
        location?: string,
        rows?: number,
        query?: string,
        employmentGradeMin?: number,
        employmentGradeMax?: number,
        observe?: 'response',
        reportProgress?: boolean,
        options?: { httpHeaderAccept?: '*/*' }
    ): Observable<HttpResponse<FilterResult>>;
    public getByFilters(
        location?: string,
        rows?: number,
        query?: string,
        employmentGradeMin?: number,
        employmentGradeMax?: number,
        observe?: 'events',
        reportProgress?: boolean,
        options?: { httpHeaderAccept?: '*/*' }
    ): Observable<HttpEvent<FilterResult>>;
    public getByFilters(
        location?: string,
        rows?: number,
        query?: string,
        employmentGradeMin?: number,
        employmentGradeMax?: number,
        observe: any = 'body',
        reportProgress: boolean = false,
        options?: { httpHeaderAccept?: '*/*' }
    ): Observable<any> {
        let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
        if (location !== undefined && location !== null) {
            localVarQueryParameters = this.addToHttpParams(
                localVarQueryParameters,
                <any>location,
                'location'
            );
        }
        if (rows !== undefined && rows !== null) {
            localVarQueryParameters = this.addToHttpParams(
                localVarQueryParameters,
                <any>rows,
                'rows'
            );
        }
        if (query !== undefined && query !== null) {
            localVarQueryParameters = this.addToHttpParams(
                localVarQueryParameters,
                <any>query,
                'query'
            );
        }
        if (employmentGradeMin !== undefined && employmentGradeMin !== null) {
            localVarQueryParameters = this.addToHttpParams(
                localVarQueryParameters,
                <any>employmentGradeMin,
                'employment-grade-min'
            );
        }
        if (employmentGradeMax !== undefined && employmentGradeMax !== null) {
            localVarQueryParameters = this.addToHttpParams(
                localVarQueryParameters,
                <any>employmentGradeMax,
                'employment-grade-max'
            );
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined =
            options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = ['*/*'];
            localVarHttpHeaderAcceptSelected =
                this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let responseType_: 'text' | 'json' = 'json';
        if (
            localVarHttpHeaderAcceptSelected &&
            localVarHttpHeaderAcceptSelected.startsWith('text')
        ) {
            responseType_ = 'text';
        }

        return this.httpClient.get<FilterResult>(`${this.configuration.basePath}/search`, {
            params: localVarQueryParameters,
            responseType: <any>responseType_,
            withCredentials: this.configuration.withCredentials,
            observe: observe,
            reportProgress: reportProgress,
        });
    }
}
